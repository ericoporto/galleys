// new module script

#define MINIMAP_PIXEL 3

_Minimap Minimap;
export Minimap;

Overlay* _mm_ovr;
DynamicSprite* _mm_dynspr;


protected void _Minimap::_MinimapRenderPx(int x, int y, int color, DrawingSurface* surf)
{
  surf.DrawingColor = color;
  x = x*MINIMAP_PIXEL;
  y = y*MINIMAP_PIXEL;
  surf.DrawRectangle(x, y, x + MINIMAP_PIXEL, y + MINIMAP_PIXEL);
}

int _tile_to_color(int tile)
{
  switch(tile) {
    case 0:
      return 2145; // gray
      break;
    case 1:
      return 44436; // clear gray
      break;
    case 2:
      return 20835; // redish dark
      break;
  }
  return 65504; // yellow
}

void _draw_player_at(int x, int y, CharacterDirection dir, DrawingSurface* surf)
{
  surf.DrawingColor = 2047;
  
  x = x*MINIMAP_PIXEL;
  y = y*MINIMAP_PIXEL;
  
  switch(dir)
  {
    case eDirectionDown:
      surf.DrawTriangle(x, y, x+MINIMAP_PIXEL, y, x+MINIMAP_PIXEL/2, y+MINIMAP_PIXEL);
      break;
    case eDirectionUp:
      surf.DrawTriangle(x, y+MINIMAP_PIXEL, x+MINIMAP_PIXEL, y+MINIMAP_PIXEL, x+MINIMAP_PIXEL/2, y);
      break;
    case eDirectionLeft:
      surf.DrawTriangle(x+MINIMAP_PIXEL, y, x+MINIMAP_PIXEL, y+MINIMAP_PIXEL, x, y+MINIMAP_PIXEL/2);
      break;
    case eDirectionRight:
      surf.DrawTriangle(x, y, x, y+MINIMAP_PIXEL, x+MINIMAP_PIXEL, y+MINIMAP_PIXEL/2);
      break;      
  }    
}

protected void _Minimap::_MinimapRender(int pos_x, int pos_y, CharacterDirection dir, DrawingSurface* surf)
{
  this.CamX = ClampI(pos_x - this.Width*MASK_FACTOR/2, 0, Room.Width - this.Width*MASK_FACTOR)/MASK_FACTOR;
  this.CamY = ClampI(pos_y - this.Height*MASK_FACTOR/2, 0, Room.Height - this.Height*MASK_FACTOR)/MASK_FACTOR;
  
  int p_pos_x = pos_x/MASK_FACTOR;
  int p_pos_y = pos_y/MASK_FACTOR;
  
  int cam_x = this.CamX;
  int cam_y = this.CamY;
  int limit_x = cam_x + this.Width;
  int limit_y = cam_y + this.Height;
  
  int color, tile;
  int x = 0;
  int y = 0;
  
  for(int i = cam_x; i<limit_x; i++)
  {
    for(int j = cam_y; j<limit_y; j++)
    {
      tile = CurrentMap.GetTileAtXY(i, j);
      color = _tile_to_color(tile);
      
      this._MinimapRenderPx(x, y, color, surf);
      
      if(i == p_pos_x && j == p_pos_y) {
        _draw_player_at(i, j, dir, surf);        
      }
      y++;
    }    
    x++;
  }
  
}

protected void _Minimap::_MinimapOnScreenRender()
{
  DrawingSurface* surf = _mm_dynspr.GetDrawingSurface();
  surf.Clear(37564);
  
  this._MinimapRender(player.x, player.y, player.GetDirection(), surf);
  
  surf.Release();  
  
  _mm_ovr.Graphic = _mm_dynspr.Graphic;
}

void _Minimap::Render()
{
  this._MinimapOnScreenRender();
}

void _Minimap::Init()
{  
  this.Width = 48;
  this.Height = 48;
  this.GraphicalWidth = MINIMAP_PIXEL*this.Width;
  this.GraphicalHeight = MINIMAP_PIXEL*this.Height;
  this.CamX = 0;
  this.CamY = 0;
  
  if(_mm_dynspr == null) {
    _mm_dynspr = DynamicSprite.Create(this.GraphicalWidth, this.GraphicalHeight, true);
  }  
  
  if(_mm_ovr == null) { 
    _mm_ovr = Overlay.CreateGraphical(0, 0, _mm_dynspr.Graphic, true);
  }
  
  _mm_ovr.Transparency = 50;
}

void game_start()
{
  Minimap.Init();
}