// new module script

 protected bool _MazeMapRenderer::_IsInBounds(int pos_x, int pos_y) {
  if (pos_x >= 0 && pos_y >= 0 && pos_x < CurrentMap.Width && pos_y < CurrentMap.Height) {
    return true;  
  }
  return false;
}

// Note: x,y flipped to ease map making
 protected void _MazeMapRenderer::_RenderTile(int pos_x, int pos_y, int position, DrawingSurface* surf) {
  if (this._IsInBounds(pos_x, pos_y)) {
    int tile = CurrentMap.GetTileAtXY(pos_x, pos_y);
    Tileset.Render(tile, position, surf);
  }
}

/**
The visibility cone is shaped like this:
 
.........
..VVVVV..
..VVVVV..
...V@V...
.........
Drawing is done in this order (a=10, b=11, c=12)
.........
..02431..
..57986..
...acb...
.........
*/ 
 void _MazeMapRenderer::Render(int x, int y, CharacterDirection facing, DrawingSurface* surf) 
{
  labelDebug.Text = String.Format("%d, %d - %s", x, y, DirToString(facing));
  
  if (facing == eDirectionUp) // north
  {
    // back row
    this._RenderTile(x-2,y-2,0, surf);
    this._RenderTile(x+2,y-2,1, surf);
    this._RenderTile(x-1,y-2,2, surf);
    this._RenderTile(x+1,y-2,3, surf);
    this._RenderTile(x,  y-2,4, surf);
    // middle row
    this._RenderTile(x-2,y-1,5, surf);
    this._RenderTile(x+2,y-1,6, surf);
    this._RenderTile(x-1,y-1,7, surf);
    this._RenderTile(x+1,y-1,8, surf);
    this._RenderTile(x,  y-1,9, surf);
    // front row
    this._RenderTile(x-1,y, 10, surf);
    this._RenderTile(x+1,y, 11, surf);
    this._RenderTile(x,  y, 12, surf);
  }
  else if (facing == eDirectionDown) // south
  {
    // back row
    this._RenderTile(x+2,y+2,0, surf);
    this._RenderTile(x-2,y+2,1, surf);
    this._RenderTile(x+1,y+2,2, surf);
    this._RenderTile(x-1,y+2,3, surf);
    this._RenderTile(x,y+2,4, surf);
    // middle row
    this._RenderTile(x+2,y+1,5, surf);
    this._RenderTile(x-2,y+1,6, surf);
    this._RenderTile(x+1,y+1,7, surf);
    this._RenderTile(x-1,y+1,8, surf);
    this._RenderTile(x,y+1,9, surf);
    // front row
    this._RenderTile(x+1,y,10, surf);
    this._RenderTile(x-1,y,11, surf);
    this._RenderTile(x,y,12, surf);  
  }
  else if (facing == eDirectionLeft) // west
  {
    // back row
    this._RenderTile(x-2,y+2,0, surf);
    this._RenderTile(x-2,y-2,1, surf);
    this._RenderTile(x-2,y+1,2, surf);
    this._RenderTile(x-2,y-1,3, surf);
    this._RenderTile(x-2,y,4, surf);
    // middle row
    this._RenderTile(x-1,y+2,5, surf);
    this._RenderTile(x-1,y-2,6, surf);
    this._RenderTile(x-1,y+1,7, surf);
    this._RenderTile(x-1,y-1,8, surf);
    this._RenderTile(x-1,y,9, surf);
    // front row
    this._RenderTile(x,y+1,10, surf);
    this._RenderTile(x,y-1,11, surf);
    this._RenderTile(x,y,12, surf);    
  }
  else if (facing == eDirectionRight) // east
  {
    // back row
    this._RenderTile(x+2,y-2,0, surf);
    this._RenderTile(x+2,y+2,1, surf);
    this._RenderTile(x+2,y-1,2, surf);
    this._RenderTile(x+2,y+1,3, surf);
    this._RenderTile(x+2,y,4, surf);
    // middle row
    this._RenderTile(x+1,y-2,5, surf);
    this._RenderTile(x+1,y+2,6, surf);
    this._RenderTile(x+1,y-1,7, surf);
    this._RenderTile(x+1,y+1,8, surf);
    this._RenderTile(x+1,y,9, surf);
    // front row
    this._RenderTile(x,y-1,10, surf);
    this._RenderTile(x,y+1,11, surf);
    this._RenderTile(x,y,12, surf);      
  }
}

_MazeMapRenderer MazeMapRenderer;
export MazeMapRenderer;