// new module script

int frame;
int _step;

Overlay* ovr;
DynamicSprite* dynspr;

void _render()
{
  if(dynspr == null) {
    dynspr = DynamicSprite.Create(320, 200);
  }
  
  if(ovr == null) { 
    ovr = Overlay.CreateGraphical(0, 0, dynspr.Graphic, true);
  }
  
  DrawingSurface* surf = dynspr.GetDrawingSurface();
  
  MazeMapRenderer.Render(player.x, player.y, player.GetDirection(), surf);
  
  surf.Release();
  ovr.Graphic = dynspr.Graphic;  
}

void repeatedly_execute_always()
{
  frame++;
  if(frame<6) return;
  
  frame = 0;
  
  Minimap.Render();
  
  _render();
}

bool _is_wall(int x, int y)
{
  return GetWalkableAreaAtRoom(x, y) != 1;
}

void game_start()
{
  _step = MASK_FACTOR;
}

void move_player_dir(CharacterDirection move_key)
{  
  if(move_key == eDirectionUp) {
    CharacterDirection dir = player.GetDirection();
    switch(dir)
    {
      case eDirectionDown:
        if(!_is_wall(player.x, player.y + _step)) player.y += _step;
        break;
      case eDirectionUp:
        if(!_is_wall(player.x, player.y - _step)) player.y -= _step;
        break;
      case eDirectionLeft:
        if(!_is_wall(player.x - _step, player.y)) player.x -= _step;
        break;
      case eDirectionRight:
        if(!_is_wall(player.x + _step, player.y)) player.x += _step;
        break;      
    }
  }
  if(move_key == eDirectionDown) {
    CharacterDirection dir = player.GetDirection();
    switch(dir)
    {
      case eDirectionDown:
        if(!_is_wall(player.x, player.y - _step)) player.y -= _step;
        break;
      case eDirectionUp:
        if(!_is_wall(player.x, player.y + _step)) player.y += _step;
        break;
      case eDirectionLeft:
        if(!_is_wall(player.x + _step, player.y)) player.x += _step;
        break;
      case eDirectionRight:
        if(!_is_wall(player.x - _step, player.y)) player.x -= _step;
        break;      
    }
  }
  if(move_key == eDirectionLeft) {
    CharacterDirection dir = player.GetDirection();
    switch(dir)
    {
      case eDirectionDown:
        player.SetDirection(eDirectionRight);
        break;
      case eDirectionUp:
        player.SetDirection(eDirectionLeft);
        break;
      case eDirectionLeft:
        player.SetDirection(eDirectionDown);
        break;
      case eDirectionRight:
        player.SetDirection(eDirectionUp);
        break;      
    }
  }
  if(move_key == eDirectionRight) {
    CharacterDirection dir = player.GetDirection();
    switch(dir)
    {
      case eDirectionDown:
        player.SetDirection(eDirectionLeft);
        break;
      case eDirectionUp:
        player.SetDirection(eDirectionRight);
        break;
      case eDirectionLeft:
        player.SetDirection(eDirectionUp);
        break;
      case eDirectionRight:
        player.SetDirection(eDirectionDown);
        break;      
    }    
  }
}

void on_key_press (eKeyCode keycode)
{
  switch(keycode)
  {
    case eKeyUpArrow:
    case eKeyW:
      move_player_dir(eDirectionUp);
      break;
    case eKeyDownArrow:
    case eKeyS:
      move_player_dir(eDirectionDown);
      break;
    case eKeyLeftArrow:
    case eKeyA:
      move_player_dir(eDirectionLeft);
      break;
    case eKeyRightArrow:
    case eKeyD:
      move_player_dir(eDirectionRight);
      break;
    
  }
  
}