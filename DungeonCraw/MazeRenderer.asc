// new module script

protected bool MazeMapRenderer::_IsInBounds(int pos_x, int pos_y) {
  if (pos_x >= 0 && pos_y >= 0 && pos_x < CurrentMap.Width && pos_y < CurrentMap.Height) {
    return true;  
  }
  return false;
}

// Note: x,y flipped to ease map making
protected void MazeMapRenderer::_RenderTile(int pos_x, int pos_y, int position) {
  if (this._IsInBounds(pos_x, pos_y)) {
    //tileset_render(mazemap.tiles[pos_y][pos_x], position);
  }
}

/**
The visibility cone is shaped like this:
 
.........
..VVVVV..
..VVVVV..
...V@V...
.........
Drawing is done in this order (a=10, b=11, c=12)
.........
..02431..
..57986..
...acb...
.........
*/ 
void MazeMapRenderer::Render(int x, int y, CharacterDirection facing) 
{
  if (facing == eDirectionUp) // north
  {
    // back row
    this._RenderTile(x-2,y-2,0);
    this._RenderTile(x+2,y-2,1);
    this._RenderTile(x-1,y-2,2);
    this._RenderTile(x+1,y-2,3);
    this._RenderTile(x,  y-2,4);
    // middle row
    this._RenderTile(x-2,y-1,5);
    this._RenderTile(x+2,y-1,6);
    this._RenderTile(x-1,y-1,7);
    this._RenderTile(x+1,y-1,8);
    this._RenderTile(x,  y-1,9);
    // front row
    this._RenderTile(x-1,y, 10);
    this._RenderTile(x+1,y, 11);
    this._RenderTile(x,  y, 12);
  }
  else if (facing == eDirectionDown) // south
  {
    // back row
    this._RenderTile(x+2,y+2,0);
    this._RenderTile(x-2,y+2,1);
    this._RenderTile(x+1,y+2,2);
    this._RenderTile(x-1,y+2,3);
    this._RenderTile(x,y+2,4);
    // middle row
    this._RenderTile(x+2,y+1,5);
    this._RenderTile(x-2,y+1,6);
    this._RenderTile(x+1,y+1,7);
    this._RenderTile(x-1,y+1,8);
    this._RenderTile(x,y+1,9);
    // front row
    this._RenderTile(x+1,y,10);
    this._RenderTile(x-1,y,11);
    this._RenderTile(x,y,12);  
  }
  else if (facing == eDirectionLeft) // west
  {
    // back row
    this._RenderTile(x-2,y+2,0);
    this._RenderTile(x-2,y-2,1);
    this._RenderTile(x-2,y+1,2);
    this._RenderTile(x-2,y-1,3);
    this._RenderTile(x-2,y,4);
    // middle row
    this._RenderTile(x-1,y+2,5);
    this._RenderTile(x-1,y-2,6);
    this._RenderTile(x-1,y+1,7);
    this._RenderTile(x-1,y-1,8);
    this._RenderTile(x-1,y,9);
    // front row
    this._RenderTile(x,y+1,10);
    this._RenderTile(x,y-1,11);
    this._RenderTile(x,y,12);    
  }
  else if (facing == eDirectionRight) // east
  {
    // back row
    this._RenderTile(x+2,y-2,0);
    this._RenderTile(x+2,y+2,1);
    this._RenderTile(x+2,y-1,2);
    this._RenderTile(x+2,y+1,3);
    this._RenderTile(x+2,y,4);
    // middle row
    this._RenderTile(x+1,y-2,5);
    this._RenderTile(x+1,y+2,6);
    this._RenderTile(x+1,y-1,7);
    this._RenderTile(x+1,y+1,8);
    this._RenderTile(x+1,y,9);
    // front row
    this._RenderTile(x,y-1,10);
    this._RenderTile(x,y+1,11);
    this._RenderTile(x,y,12);      
  }  
}